#version 450
#extension GL_ARB_separate_shader_objects : enable
#include "global_definition.glsl.h"
#include "tile_common.glsl.h"
#include "noise.glsl.h"

layout(push_constant) uniform TileUniformBufferObject {
  TileUpdateParams tile_params;
};

layout(set = 0, binding = ROCK_LAYER_BUFFER_INDEX) uniform sampler2D rock_layer;
layout(set = 0, binding = SOIL_WATER_LAYER_BUFFER_INDEX, rg16) uniform readonly image2D soil_water_layer;
layout(set = 0, binding = DST_SOIL_WATER_LAYER_BUFFER_INDEX, rg16) uniform writeonly image2D dst_soil_water_layer;
layout(set = 0, binding = DST_WATER_FLOW_BUFFER_INDEX, rg16f) uniform image2D dst_water_flow;

shared uvec2 s_terrain_layers[20][20];
shared uint s_adjust_layers[18][18];

uvec2 getPackedLayers(ivec2 src_coords) {
    vec2 uv = src_coords * tile_params.inv_width_pixel_count;
    float rock_height = texture(rock_layer, uv).x;
    vec2 soil_water_thickness = imageLoad(soil_water_layer, src_coords).xy;
    
    return uvec2(floatBitsToUint(rock_height), packUnorm2x16(soil_water_thickness));
}

vec3 unpackTerrainLayersU3(uvec2 packed_layers) {
    return vec3(uintBitsToFloat(packed_layers.x),
                unpackUnorm2x16(packed_layers.y) * 
                SOIL_WATER_LAYER_MAX_THICKNESS);
}

vec2 unpackTerrainLayersHeightU2(uvec2 packed_layers) {
    vec3 layer_thickness = unpackTerrainLayersU3(packed_layers);
    float soil_height = layer_thickness.x + layer_thickness.y;
    float water_height = layer_thickness.z + soil_height;
    return vec2(soil_height, water_height);
}

uint adjustLayersHeight(ivec2 src_coords, ivec2 global_src_coords) {
    vec2 left_h = unpackTerrainLayersHeightU2(s_terrain_layers[src_coords.y][src_coords.x - 1]);
    vec2 right_h = unpackTerrainLayersHeightU2(s_terrain_layers[src_coords.y][src_coords.x + 1]);
    vec2 back_h = unpackTerrainLayersHeightU2(s_terrain_layers[src_coords.y - 1][src_coords.x]);
    vec2 front_h = unpackTerrainLayersHeightU2(s_terrain_layers[src_coords.y + 1][src_coords.x]);
    vec3 layer_thickness = unpackTerrainLayersU3(s_terrain_layers[src_coords.y][src_coords.x]);
    float soil_height = layer_thickness.x + layer_thickness.y;
    float water_height = layer_thickness.z + soil_height;
    vec2 center_h = vec2(soil_height, water_height);

    vec2 min_h = vec2(10000.0f);
    if (global_src_coords.x > 0) {
        min_h = min(min_h, left_h);
    }
    if (global_src_coords.x < tile_params.width_pixel_count-1) {
        min_h = min(min_h, right_h);
    }
    if (global_src_coords.y > 0) {
        min_h = min(min_h, back_h);
    }
    if (global_src_coords.y < tile_params.width_pixel_count-1) {
        min_h = min(min_h, front_h);
    }

    vec2 h_diff = max(center_h - min_h, 0.0f);
    vec4 hash_values = 0.3f + hash43(vec3(global_src_coords, tile_params.current_time)) * 0.7f;

    h_diff.x = min(h_diff.x * 0.0125f * hash_values.x,
                   layer_thickness.y * 0.0125f * hash_values.y);
    h_diff.y = min(h_diff.y * 0.8f * hash_values.z,
                   layer_thickness.z * 0.8f * hash_values.w);

    if (layer_thickness.z < 0.002f) {
        h_diff.x = 0.0f;
    }
    else {
        h_diff.x = min(h_diff.x, 0.002f);
    }

    uint packed_adj_height = 0;
    if (h_diff.x > 0) { // adjust soil height.
        uint idx = min_h.x == left_h.x ? 0 :
                   (min_h.x == right_h.x ? 1 : 
                   (min_h.x == back_h.x ? 2 : 3));
        packed_adj_height = (uint(h_diff.x * 1024.0f) & 0x3fff) | (idx << 14);
    }

    if (h_diff.y > 0) { // adjust water height.
        uint idx = min_h.y == left_h.y ? 0 :
                   (min_h.y == right_h.y ? 1 : 
                   (min_h.y == back_h.y ? 2 : 3));
        packed_adj_height |= ((uint(h_diff.y * 1024.0f) & 0x3fff) | (idx << 14)) << 16;
    }

    return packed_adj_height;
}

vec4 accumulateLayerLevelFromNeighbor(ivec2 src_local_coords) {
    uint center = s_adjust_layers[src_local_coords.y][src_local_coords.x];
    uint left = s_adjust_layers[src_local_coords.y][src_local_coords.x - 1];
    uint right = s_adjust_layers[src_local_coords.y][src_local_coords.x + 1];
    uint back = s_adjust_layers[src_local_coords.y - 1][src_local_coords.x];
    uint front = s_adjust_layers[src_local_coords.y + 1][src_local_coords.x];
    uint layer_adjust = 0;

    // adjust soil layer.
    uint soil_height = 0;
    if ((left & 0x0000c000) == 0x00004000) {
        soil_height += left & 0x3fff;
    }
    if ((right & 0x0000c000) == 0x00000000) {
        soil_height += right & 0x3fff;
    }
    if ((back & 0x0000c000) == 0x0000c000) {
        soil_height += back & 0x3fff;
    }
    if ((front & 0x0000c000) == 0x00008000) {
        soil_height += front & 0x3fff;
    }

    int adj_soil_height = int(soil_height) - int(center & 0x3fff);

    // adjust water layer.
    ivec2 move_vector_xz = ivec2(0);
    int water_height = 0;
    if ((left & 0xc0000000) == 0x40000000) {
        int height_adj = int((left >> 16) & 0x3fff);
        water_height += height_adj;
        move_vector_xz += ivec2(height_adj, 0);
    }
    if ((right & 0xc0000000) == 0x00000000) {
        int height_adj = int((right >> 16) & 0x3fff);
        water_height += height_adj;
        move_vector_xz += ivec2(-height_adj, 0);
    }
    if ((back & 0xc0000000) == 0xc0000000) {
        int height_adj = int((back >> 16) & 0x3fff);
        water_height += height_adj;
        move_vector_xz += ivec2(0, height_adj);
    }
    if ((front & 0xc0000000) == 0x80000000) {
        int height_adj = int((front >> 16) & 0x3fff);
        water_height += height_adj;
        move_vector_xz += ivec2(0, -height_adj);
    }

    uint flow_tag = center >> 30;
    int center_height = int((center >> 16) & 0x3fff);
    int adj_water_height = water_height - center_height;
    float height_scale = center_height;
    move_vector_xz += 
        ivec2(flow_tag == 0 ? -center_height : (flow_tag == 1 ? center_height : 0),
             flow_tag == 2 ? -center_height : (flow_tag == 3 ? center_height : 0));

    return vec4(adj_soil_height, adj_water_height, move_vector_xz * tile_params.flow_speed_factor) / 1024.0f;
}

vec2 updateSoilWaterLayers(uint packed_layers, uint from_neighbor, uint to_neighbor)
{
    vec2 soil_water_layers = unpackUnorm2x16(packed_layers);
    ivec2 adj_layer = ivec2(from_neighbor & 0xffff, from_neighbor >> 16);
    ivec2 center = ivec2(to_neighbor & 0x3fff, (to_neighbor >> 16) & 0x3fff);
    vec2 adj_height = (adj_layer - center) / 1024.0f;

    vec2 new_soil_water_layers =
        soil_water_layers +
        adj_height *
        vec2(1.0f / SOIL_WATER_LAYER_MAX_THICKNESS);

    return mix(soil_water_layers, new_soil_water_layers, 1.0f);
}

layout(local_size_x = 16, local_size_y = 16) in;
void main()
{
  // get index in global work group i.e x,y position
  int buffer_size = int(tile_params.width_pixel_count);
  // skip 2 lines on border.
  ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
  ivec2 local_coords = ivec2(gl_LocalInvocationID.xy);
  ivec2 block_coords = ivec2(gl_WorkGroupID.xy) * 16;
  uint pixel_index = gl_LocalInvocationIndex;

  if (pixel_index < 10 * 20) {
    ivec2 src_local_coords = ivec2((pixel_index % 10) * 2, pixel_index / 10);
    ivec2 src_coords = clamp(src_local_coords + block_coords - 2,
                             0,
                             buffer_size - 1);
    s_terrain_layers[src_local_coords.y][src_local_coords.x] = getPackedLayers(src_coords);

    src_coords = clamp(src_local_coords + ivec2(1, 0) + block_coords - 2,
                       0,
                       buffer_size - 1);
    s_terrain_layers[src_local_coords.y][src_local_coords.x + 1] = getPackedLayers(src_coords);
  }

  barrier();
  memoryBarrierShared();

  if (pixel_index < 9 * 18) {
    ivec2 src_local_coords = ivec2((pixel_index % 9) * 2, pixel_index / 9);
    s_adjust_layers[src_local_coords.y][src_local_coords.x] = 
      adjustLayersHeight(src_local_coords + 1,
                         src_local_coords + 1 + block_coords - 1);

    s_adjust_layers[src_local_coords.y][src_local_coords.x + 1] = 
      adjustLayersHeight(src_local_coords + ivec2(1, 0) + 1,
                         src_local_coords + ivec2(1, 0) + 1 + block_coords - 1);
  }

  barrier();
  memoryBarrierShared();

  if (all(lessThan(pixel_coords, uvec2(tile_params.width_pixel_count)))) {
    vec2 move_vector_xz = vec2(0);
    vec4 layer_adjust = accumulateLayerLevelFromNeighbor(local_coords + 1);
    ivec2 src_local_coords = local_coords + 2;
    uvec2 packed_layers = s_terrain_layers[src_local_coords.y][src_local_coords.x];
    vec2 soil_water_layers = unpackUnorm2x16(packed_layers.y) +
        layer_adjust.xy * vec2(1.0f / SOIL_WATER_LAYER_MAX_THICKNESS);
    imageStore(dst_soil_water_layer, pixel_coords, vec4(soil_water_layers, 0, 0));
    vec2 last_water_flow = imageLoad(dst_water_flow, pixel_coords).xy;
    imageStore(dst_water_flow, pixel_coords, vec4(mix(layer_adjust.zw, last_water_flow, 0.85), 0, 0));
  }
}