#version 450
#extension GL_ARB_separate_shader_objects : enable
#include "global_definition.glsl.h"
#include "weather_common.glsl.h"
#include "tile_common.glsl.h"
#include "noise.glsl.h"

#define MAX_UINT_VALUE    0xffffffff
#define INVALIDATE_VALUE  0xffffffff
#define MIN_UINT_VALUE    0x00000000

layout(push_constant) uniform AirflowUniformBufferObject {
  AirflowUpdateParams params;
};

layout(set = 0, binding = DST_TEMP_TEX_INDEX, r16) uniform writeonly image3D dst_temp;
layout(set = 0, binding = DST_MOISTURE_TEX_INDEX, r16) uniform writeonly image3D dst_moisture;
layout(set = 0, binding = DST_PRESSURE_TEX_INDEX, r16f) uniform writeonly image3D dst_pressure;
layout(set = 0, binding = SRC_TEMP_TEX_INDEX) uniform sampler3D src_temp;
layout(set = 0, binding = SRC_MOISTURE_TEX_INDEX) uniform sampler3D src_moisture;
layout(set = 0, binding = SRC_PRESSURE_TEX_INDEX) uniform sampler3D src_pressure;
layout(set = 0, binding = DST_AIRFLOW_TEX_INDEX, rgba8) uniform image3D dst_airflow;
layout(set = 0, binding = ROCK_LAYER_BUFFER_INDEX) uniform sampler2D rock_layer;
layout(set = 0, binding = SOIL_WATER_LAYER_BUFFER_INDEX) uniform sampler2D soil_water_layer;

shared vec2 s_ground_info[12][12];
shared vec3 s_ground_weather_info[12][12];
shared uint s_flow_grid[18][10][10];

vec2 getPackedLayers(vec2 uv) {
    float rock_height = texture(rock_layer, clamp(uv, 0.0f, 1.0f)).x;
    vec2 soil_water_thickness = 
        texture(soil_water_layer, uv).xy * SOIL_WATER_LAYER_MAX_THICKNESS;

    float soil_layer_height = rock_height + soil_water_thickness.x;
    float water_layer_height = soil_layer_height + soil_water_thickness.y;
    
    vec2 layer_height = vec2(soil_layer_height, water_layer_height);

    return layer_height;
}

uint packTempMoist(float temp, float moist, uint tag) {
    temp /= kMaxTemperatureAdjustRange;
    float moist_normalized = normalizeMoisture(moist);
    uint packed_moist_temp = 
        packUnorm2x16(vec2(
            temp * 0.5f + 0.5f,
            moist_normalized));
    packed_moist_temp = (packed_moist_temp & 0xfffffff8) | (tag & 0x07);
    return packed_moist_temp;
}

vec2 unpackTempMoist(uint packed_temp_moist) {
    vec2 unorm_moist_temp = unpackUnorm2x16(packed_temp_moist & 0xfffffff8);
    return vec2((unorm_moist_temp.x * 2.0f - 1.0f) * kMaxTemperatureAdjustRange,
                denormalizeMoisture(unorm_moist_temp.y));
}

uint packTempMoistDiff(float temp, float moist, uint tag) {
    temp /= kMaxTempMoistDiff;
    float moist_normalized = normalizeMoistureDiff(moist);
    uint packed_moist_temp = 
        packUnorm2x16(vec2(
            temp * 0.5f + 0.5f,
            moist_normalized));
    packed_moist_temp = (packed_moist_temp & 0xfffffff8) | (tag & 0x07);
    return packed_moist_temp;
}

vec2 unpackTempMoistDiff(uint packed_temp_moist) {
    vec2 unorm_moist_temp = unpackUnorm2x16(packed_temp_moist & 0xfffffff8);
    return vec2((unorm_moist_temp.x * 2.0f - 1.0f) * kMaxTempMoistDiff,
                denormalizeMoistureDiff(unorm_moist_temp.y));
}

vec3 getGlobalAirflowVector(vec2 noise) {
    float angle = params.global_flow_angle + (noise.x - 0.5f) * 0.5f;
    return vec3(cos(angle), sin(angle), 0.0f) * params.global_flow_scale * (1.0f + noise.y * 0.5f);
}

float getBuckSaturatedVaporPressure(float temp) {
    float pressure_kpa =
        0.61121f * exp((18.678f - (temp / 234.5f)) * (temp / (257.14f + temp)));

    return pressure_kpa;
}

vec3 getUpdatedWeatherInfo(ivec2 src_coords, vec2 ground_info) {

    vec2 noise_value = hash23(vec3(src_coords, params.current_time));
    float sample_idx = getHeightToSample(ground_info.y) * params.size.z + (noise_value.x - 0.5f);

    float water_depth = ground_info.y - ground_info.x;
    float water_level = clamp((water_depth - 0.01f) * 10.0f, 0.0f, 1.0f);
    float temp_adjust = mix(params.controls.soil_temp_adj, params.controls.water_temp_adj, water_level);
    float moist_adjust = mix(params.controls.soil_moist_adj, params.controls.water_moist_adj, water_level);

    temp_adjust *= mix(noise_value.y, 1.0f, 0.5f);
    moist_adjust *= mix(noise_value.y, 1.0f, 0.5f);

    return vec3(sample_idx, temp_adjust, moist_adjust);
}

float getFrozenTransferRate(int pixel_height, vec2 noise, vec2 temp_moist_adj) {
    float uvw_w = (pixel_height + 0.5) * params.inv_size.z;
    float sample_h = getSampleToHeight(uvw_w);
    float target_stable_temp = getReferenceDegree(params.controls.sea_level_temperature, sample_h);
    float current_temp = target_stable_temp + temp_moist_adj.x + noise.x * 2.0f;

    float frozen_rate = (current_temp - 12.0f) / (10.0f + noise.y * 2.0f) * 0.5f + 0.5f;
    float frozen_transfer_rate = pow(clamp(frozen_rate, 0.0f, 1.0f), params.controls.frozen_pow_curve);

    return frozen_transfer_rate * exp2(-temp_moist_adj.y * params.controls.frozen_ext_factor);
}

uint swapMoistTemp(uint input_data) {
    uint moist = input_data >> 16;
    uint temp = input_data & 0xfff8;

    return (temp << 16) | (moist << 3) | (input_data & 0x07);
}

uint reswapMoistTemp(uint input_data) {
    uint moist = input_data & 0x7fff8;
    uint temp = input_data >> 19;

    return (moist << 13) | (temp << 3) | (input_data & 0x07);
}

void getMaxVaporPressureSpace(vec3 uvw, ivec3 slc, ivec3 pixel_coords, uint node_tag, inout uint max_space) {
    float vapor_pressure = texture(src_pressure, uvw).x;
    float cur_temp = texture(src_temp, uvw).x;
    vec3 weather_info = s_ground_weather_info[slc.y][slc.x];
    int sample_idx = int(weather_info.x);

    if (pixel_coords.z >= sample_idx) {
        if (pixel_coords.z == sample_idx) { // touch ground.
            vapor_pressure += weather_info.z * params.moist_to_pressure_ratio;
            cur_temp += weather_info.y;
        }

        float saturated_vapor_pressure =
            getBuckSaturatedVaporPressure(cur_temp);

        float pressure_space = max(saturated_vapor_pressure - vapor_pressure, 0.0f);
        uint u_pressure_space = (floatBitsToInt(pressure_space) & 0xfffffff8) | node_tag; 

        max_space = max(max_space, u_pressure_space);
    }
}

uint packTempDiff(uint u_max_pressure, vec3 uvw, ivec3 slc, ivec3 pixel_coords) {
    uint packed_temp_moist_diff = packTempMoistDiff(0, 0, 0);
    if (u_max_pressure != MIN_UINT_VALUE) {
        vec2 min_tm = unpackTempMoist(u_min_temp);
        vec2 max_tm = unpackTempMoist(u_max_moist);
        vec2 center_tm = unpackTempMoist(u_center);

        vec4 hash_values = hash44(vec4(vec3(pixel_coords), params.current_time));
        vec2 noise_values = hash_values.xy * 2.0f - 1.0f;

        float transfer_ratio = params.controls.transfer_ratio * (1.0f + noise_values.x * params.controls.transfer_noise_weight);

        float center_frozen_transfer_rate =
            getFrozenTransferRate(pixel_coords.z, hash_values.xy, center_tm);

        uint max_moist_loc = u_max_moist & 0x07;
        int height_adj = max_moist_loc == kNodeAbove ? 1 : (max_moist_loc == kNodeBelow ? -1 : 0);
        float max_frozen_transfer_rate =
            getFrozenTransferRate(pixel_coords.z + height_adj, hash_values.zw, max_tm);

        bool cloud_forming = center_frozen_transfer_rate > max_frozen_transfer_rate;
        bool heat_transfer = center_tm.x > min_tm.x;
        if (cloud_forming && heat_transfer && hash_values.x > params.controls.cloud_forming_ratio) {
            cloud_forming = false;
        }
        uint target_flag = cloud_forming ? u_max_moist : u_min_temp;
        vec2 target_tm = cloud_forming ? max_tm : min_tm;
        float moist_trans = center_tm.y;

        if (cloud_forming || heat_transfer) {
            float temp_diff = center_tm.x - target_tm.x;
            float temp_diff_adj = temp_diff * transfer_ratio * center_frozen_transfer_rate;
            float moist_adj = moist_trans * transfer_ratio * center_frozen_transfer_rate;
            packed_temp_moist_diff = packTempMoistDiff(temp_diff_adj, moist_adj, target_flag);
        }
    }

    return packed_temp_moist_diff;
}

void createTempMoistureFlowBuffer(int pixel_index, ivec3 block_coords) {
    int iz = pixel_index / (10 * 10);
    int ixy = pixel_index % (10 * 10);

    ivec3 dlc = ivec3(ixy % 10, ixy / 10, iz);
    ivec3 slc = dlc + 1;

    ivec3 pixel_coords = clamp(dlc + block_coords - 1,
                               ivec3(0),
                               params.size - 1);

    vec4 noise_values = hash44(vec4(vec3(pixel_coords), params.current_time));
    vec3 uvw = ((pixel_coords + 0.5f) + getGlobalAirflowVector(noise_values.xy)) * params.inv_size;

    uint max_pressure = MIN_UINT_VALUE;
    getMaxVaporPressureSpace(uvw + vec3(-params.inv_size.x, 0, 0), slc + ivec3(-1, 0, 0), pixel_coords + ivec3(-1, 0, 0), kNodeLeft, max_pressure);
    getMaxVaporPressureSpace(uvw + vec3(params.inv_size.x, 0, 0), slc + ivec3(1, 0, 0), pixel_coords + ivec3(1, 0, 0), kNodeRight, max_pressure);
    getMaxVaporPressureSpace(uvw + vec3(0, -params.inv_size.y, 0), slc + ivec3(0, -1, 0), pixel_coords + ivec3(0, -1, 0), kNodeBack, max_pressure);
    getMaxVaporPressureSpace(uvw + vec3(0, params.inv_size.y, 0), slc + ivec3(0, 1, 0), pixel_coords + ivec3(0, 1, 0), kNodeFront, max_pressure);
    getMaxVaporPressureSpace(uvw + vec3(0, 0, -params.inv_size.z), slc + ivec3(0, 0, -1), pixel_coords + ivec3(0, 0, -1), kNodeBelow, max_pressure);
    getMaxVaporPressureSpace(uvw + vec3(0, 0, params.inv_size.z), slc + ivec3(0, 0, 1), pixel_coords + ivec3(0, 0, 1), kNodeAbove, max_pressure);

    s_flow_grid[dlc.z][dlc.y][dlc.x] =
        packTempDiff(max_pressure, uvw, slc, pixel_coords);
}

vec2 gatherTempMoistSamples(ivec3 dlc, out vec3 airflow_dir, float above_ratio, float below_ratio) {
    ivec3 slc = dlc + 1;
    uint center = s_flow_grid[slc.z][slc.y][slc.x];

    uint left  = s_flow_grid[slc.z][slc.y][slc.x-1];
    uint right = s_flow_grid[slc.z][slc.y][slc.x+1];
    uint back  = s_flow_grid[slc.z][slc.y-1][slc.x];
    uint front = s_flow_grid[slc.z][slc.y+1][slc.x];
    uint below = s_flow_grid[slc.z-1][slc.y][slc.x];
    uint above = s_flow_grid[slc.z+1][slc.y][slc.x];

    vec2 temp_moist_adj = vec2(0);
    vec3 airflow_vec = vec3(0);
    if ((left & 0x07) == kNodeRight) {
        vec2 tm = unpackTempMoistDiff(left);
        temp_moist_adj += tm;
        airflow_vec += vec3(tm.x, 0, 0);
    }
    if ((right & 0x07) == kNodeLeft) {
        vec2 tm = unpackTempMoistDiff(right);
        temp_moist_adj += tm;
        airflow_vec += vec3(-tm.x, 0, 0);
    }
    if ((back & 0x07) == kNodeFront) {
        vec2 tm = unpackTempMoistDiff(back);
        temp_moist_adj += tm;
        airflow_vec += vec3(0, 0, tm.x);
    }
    if ((front & 0x07) == kNodeBack) {
        vec2 tm = unpackTempMoistDiff(front);
        temp_moist_adj += tm;
        airflow_vec += vec3(0, 0, -tm.x);
    }
    if ((below & 0x07) == kNodeAbove) {
        vec2 tm = unpackTempMoistDiff(below) * below_ratio;
        temp_moist_adj += tm;
        airflow_vec += vec3(0, tm.x, 0);
    }
    if ((above & 0x07) == kNodeBelow) {
        vec2 tm = unpackTempMoistDiff(above) * above_ratio;
        temp_moist_adj += tm;
        airflow_vec += vec3(0, -tm.x, 0);
    }

    uint flow_tag = center & 0x07;
    vec2 tm = unpackTempMoistDiff(center);
    temp_moist_adj -= tm;

    airflow_vec += vec3(flow_tag == kNodeLeft  ? -tm.x : (flow_tag == kNodeRight ? tm.x : 0),
                        flow_tag == kNodeBelow ? -tm.x : (flow_tag == kNodeAbove ? tm.x : 0),
                        flow_tag == kNodeBack  ? -tm.x : (flow_tag == kNodeFront ? tm.x : 0));

    airflow_dir = airflow_vec;
    return temp_moist_adj;
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 16) in;
void main()
{
    ivec3 pixel_coords = ivec3(gl_GlobalInvocationID.xyz);
    ivec3 local_coords = ivec3(gl_LocalInvocationID.xyz);
    ivec3 block_coords = ivec3(gl_WorkGroupID.xyz) * ivec3(8, 8, 16);
    int pixel_index = int(gl_LocalInvocationIndex);

    if (pixel_index < 12 * 12) {
        ivec2 slc = ivec2(pixel_index % 12, pixel_index / 12);
        ivec2 src_coords = clamp(slc + block_coords.xy - 2,
                                 ivec2(0),
                                 params.size.xy - 1);
        vec2 noise_values = hash23(vec3(src_coords, params.current_time));
        vec2 uv = (src_coords + noise_values) * params.inv_size.xy;
        s_ground_info[slc.y][slc.x] =
            getPackedLayers((uv - 0.5f) * (kCloudMapSize / kWorldMapSize) + 0.5f);

        s_ground_weather_info[slc.y][slc.x] =
            getUpdatedWeatherInfo(src_coords, s_ground_info[slc.y][slc.x]);
    }

    barrier();
    memoryBarrierShared();

    if (pixel_index < (18 * 10 * 10 / 2)) {
        for (int i = 0; i < 2; i++) {
            createTempMoistureFlowBuffer(pixel_index * 2 + i, block_coords);
        }
    }

    barrier();
    memoryBarrierShared();

    vec3 airflow_dir;
    float uvw_w = (pixel_coords.z + 0.5) * params.inv_size.z;
    float sample_delta_h = getSampleToDeltaHeight(uvw_w);
    float above_sample_delta_h = getSampleToDeltaHeight(uvw_w + params.inv_size.z);
    float below_sample_delta_h = getSampleToDeltaHeight(uvw_w - params.inv_size.z);
    vec2 temp_moist_adj = gatherTempMoistSamples(local_coords,
                                          airflow_dir,
                                          above_sample_delta_h / sample_delta_h,
                                          below_sample_delta_h / sample_delta_h);

    float sample_h = getSampleToHeight(uvw_w);
    float target_stable_temp = getReferenceDegree(params.controls.sea_level_temperature, sample_h);

    ivec3 slc = local_coords + 2;
    vec2 temp_moist = vec2(0);
    if (s_temp_moisture_grid[slc.z][slc.y][slc.x] != INVALIDATE_VALUE) {
        temp_moist = unpackTempMoist(s_temp_moisture_grid[slc.z][slc.y][slc.x]);
    }

    vec4 noise_values = hash44(vec4(vec3(pixel_coords), params.current_time));
    vec3 uvw = ((pixel_coords + 0.5f) + getGlobalAirflowVector(noise_values.xy)) * params.inv_size;

    float random_angle = noise_values.z * 2.0f * 3.1415926f;

    float scale = pixel_coords.z * params.inv_size.z * 0.125f;
    vec2 uv_offset = params.inv_size.xy * scale * vec2(cos(random_angle), sin(random_angle));
    uvw.xy += uv_offset;

    float temp = texture(src_temp, uvw).x;
    float moist = texture(src_moisture, uvw).x;

    float src_temp = denormalizeTemperature(temp);
    float src_moist = denormalizeMoisture(moist);

    float cur_temp = target_stable_temp + temp_moist.x + temp_moist_adj.x;
    float cur_moist = temp_moist.y + temp_moist_adj.y;

    cur_temp = mix(cur_temp, src_temp, 0.3f);
    cur_moist = mix(cur_moist, src_moist, 0.3f);
    imageStore(dst_temp,
               pixel_coords,
               vec4(normalizeTemperature(cur_temp)));
    imageStore(dst_moisture,
               pixel_coords,
               vec4(normalizeMoisture(cur_moist)));

    vec4 src_airflow = imageLoad(dst_airflow, pixel_coords);
    vec3 src_airflow_dir = src_airflow.xyz * 2.0f - 1.0f;
    airflow_dir = mix(airflow_dir, src_airflow_dir * getPackedVectorLength(src_airflow.w), params.controls.mix_rate);
    float new_airflow_str = getNormalizedVectorLength(airflow_dir);
    imageStore(dst_airflow, pixel_coords, vec4(normalize(airflow_dir) * 0.5f + 0.5f, new_airflow_str));
}