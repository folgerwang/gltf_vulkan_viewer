#version 450
#extension GL_ARB_separate_shader_objects : enable
#include "global_definition.glsl.h"
#include "weather_common.glsl.h"
#include "tile_common.glsl.h"
#include "noise.glsl.h"

layout(push_constant) uniform AirflowUniformBufferObject {
  AirflowUpdateParams params;
};

layout(set = 0, binding = DST_TEMP_MOISTURE_TEX_INDEX, rg16) uniform writeonly image3D dst_temp_moisture;
layout(set = 0, binding = SRC_TEMP_MOISTURE_TEX_INDEX) uniform sampler3D src_temp_moisture;
layout(set = 0, binding = DST_AIRFLOW_TEX_INDEX, rgba8) uniform image3D dst_airflow;
layout(set = 0, binding = ROCK_LAYER_BUFFER_INDEX) uniform sampler2D rock_layer;
layout(set = 0, binding = SOIL_WATER_LAYER_BUFFER_INDEX) uniform sampler2D soil_water_layer;

shared vec2 s_ground_info[12][12];
shared uint s_temp_moisture_grid[20][12][12];
shared uint s_flow_grid[18][10][10];

vec2 getPackedLayers(vec2 uv) {
    vec2 layer_height = vec2(-10.0f, 0.0f);

    if (uv.x >= 0.0f && uv.x <= 1.0f && uv.y >= 0.0f && uv.y <= 1.0f) {
        float rock_height = texture(rock_layer, uv).x;
        vec2 soil_water_thickness = 
            texture(soil_water_layer, uv).xy * SOIL_WATER_LAYER_MAX_THICKNESS;

        float soil_layer_height = rock_height + soil_water_thickness.x;
        float water_layer_height = soil_layer_height + soil_water_thickness.y;
    
        layer_height = vec2(soil_layer_height, water_layer_height);
    }

    return layer_height;
}

uint packTempMoist(float temp, float moist, uint tag) {
    temp /= kMaxTemperatureAdjustRange;
    moist /= kMaxMoistureIntensity;
    uint packed_moist_temp = 
        packUnorm2x16(vec2(
            moist,
            temp * 0.5f + 0.5f));
    packed_moist_temp = (packed_moist_temp & 0xfffffff8) | (tag & 0x07);
    return packed_moist_temp;
}

vec2 unpackTempMoist(uint packed_temp_moist) {
    vec2 snorm_moist_temp = unpackUnorm2x16(packed_temp_moist & 0xfffffff8);
    return vec2((snorm_moist_temp.y * 2.0f - 1.0f) * kMaxTemperatureAdjustRange,
                snorm_moist_temp.x * kMaxMoistureIntensity);
}

uint packTempMoistDiff(float temp, float moist, uint tag) {
    uint temp_moist_diff = packSnorm2x16(vec2(moist, temp) / kMaxTempMoistDiff);
    temp_moist_diff = (temp_moist_diff & 0xfffffff8) | (tag & 0x07);
    return temp_moist_diff;
}

vec3 getGlobalAirflowVector(float noise) {
    float angle = params.global_flow_angle + (noise * 2.0f - 1.0f) * 0.526f;
    return vec3(cos(angle), sin(angle), 0.0f) * params.global_flow_scale;
}

uint getUpdatedTemperature(ivec3 slc, ivec3 block_coords, vec2 ground_info) {
    ivec3 src_coords = clamp(slc + block_coords - 2,
                             ivec3(0),
                             params.size - 1);

    vec4 noise_values = hash44(vec4(vec3(src_coords), params.current_time));
    vec3 uvw = ((src_coords + 0.5f) + getGlobalAirflowVector(noise_values.x)) * params.inv_size;

    vec2 src_temp_moist = texture(src_temp_moisture, uvw).xy;
    float src_temp = denormalizeTemperature(src_temp_moist.x);
    float src_moist = denormalizeMoisture(src_temp_moist.y);

    float uvw_w = (src_coords.z + 0.5f) * params.inv_size.z;
    float sample_h = getSampleToHeight(uvw_w);
    float target_stable_temp = getReferenceDegree(params.controls.sea_level_temperature, sample_h);

    // add some noise for contact detection.
    float low_uvw_w = uvw_w + (noise_values.x - 1.0f) * params.inv_size.z;
    float min_h = getSampleToHeight(low_uvw_w);

    float water_depth = ground_info.y - ground_info.x;
    bool cell_touch_ground = (ground_info.y >= min_h - 0.01f);
    bool cell_above_ground = ground_info.y < min_h;
    float temp_adjust = 0.0f;
    float moist_adjust = 0.0f;
    if (cell_touch_ground) {
        float water_level = clamp((water_depth - 0.01f) * 10.0f, 0.0f, 1.0f);
        temp_adjust += mix(params.controls.soil_temp_adj, params.controls.water_temp_adj, water_level);
        moist_adjust += mix(params.controls.soil_moist_adj, params.controls.water_moist_adj, water_level);
    }
    else if (cell_above_ground) {
        temp_adjust += params.controls.moist_temp_convert * src_moist;
    }

    float ratio = mix((noise_values.z + noise_values.w) * 0.5f, 1.0f, 0.8f);
    temp_adjust *= ratio;
    moist_adjust *= ratio;

    // make sure color different here is positive.
    return packTempMoist(src_temp + temp_adjust - target_stable_temp,
                         src_moist + moist_adjust,
                         0);
}

void updateTempMoistureBuffer(int pixel_index, ivec3 block_coords) {
    int iz = pixel_index / (12 * 12);
    int ixy = pixel_index % (12 * 12);
    ivec3 slc = ivec3(ixy % 12, ixy / 12, iz);

    vec2 ground_info = s_ground_info[slc.y][slc.x];

    uint temp_moist = getUpdatedTemperature(slc, block_coords, ground_info);
    s_temp_moisture_grid[slc.z][slc.y][slc.x] = temp_moist;
}

float getFrozenTransferRate(int pixel_height, vec2 noise, vec2 temp_moist_adj) {
    noise = vec2(0);
    float uvw_w = (pixel_height + 0.5) * params.inv_size.z;
    float sample_h = getSampleToHeight(uvw_w);
    float target_stable_temp = getReferenceDegree(params.controls.sea_level_temperature, sample_h);

    float frozen_rate = (target_stable_temp + temp_moist_adj.x + noise.x * 2.0f - 15.0f) / (8.0f + noise.y * 2.0f) * 0.5f + 0.5f;
    float frozen_transfer_rate = pow(clamp(frozen_rate, 0.0f, 1.0f), mix((noise.x + noise.y) * 0.5f, 1.0f, 0.8f) * 2.0f);

    return exp(-temp_moist_adj.y * 5.0f * (1.0f - frozen_transfer_rate));
}

uint packTempDiff(uint u_min_temp, uint u_max_moist, uint u_center, ivec3 pixel_coords) {
    vec2 min_tm = unpackTempMoist(u_min_temp);
    vec2 max_tm = unpackTempMoist(u_max_moist);
    vec2 center_tm = unpackTempMoist(u_center);

    vec4 hash_values = hash44(vec4(vec3(pixel_coords), params.current_time));
    vec2 noise_values = hash_values.xy * 2.0f - 1.0f;

    float temp_transfer = params.controls.heat_transfer_ratio * (1.0f + noise_values.x * params.controls.heat_transfer_noise_weight);
    float moist_transfer = params.controls.moist_transfer_ratio * (1.0f + noise_values.y * params.controls.moist_transfer_noise_weight);

    float center_frozen_transfer_rate =
        getFrozenTransferRate(pixel_coords.z, hash_values.xy, center_tm);

    uint max_moist_loc = u_max_moist & 0x07;
    int height_adj = max_moist_loc == kNodeAbove ? 1 : (max_moist_loc == kNodeBelow ? -1 : 0);
    float max_frozen_transfer_rate =
        getFrozenTransferRate(pixel_coords.z + height_adj, hash_values.zw, max_tm);

    bool absorb = center_frozen_transfer_rate < max_frozen_transfer_rate;
    absorb = (absorb && center_tm.x > min_tm.x && hash_values.x > 0.7f) ? false : absorb;
    uint target_flag = absorb ? u_max_moist : u_min_temp;
    vec2 target_tm = absorb ? max_tm : min_tm;
    float moist_trans = center_tm.y;

    uint packed_temp_moist_diff = 0;
    if (absorb || center_tm.x > min_tm.x) {
        float temp_diff = center_tm.x - target_tm.x;
        float temp_diff_adj = temp_diff * temp_transfer;
        float moist_adj = moist_trans * moist_transfer * center_frozen_transfer_rate;
        packed_temp_moist_diff = packTempMoistDiff(temp_diff_adj, moist_adj, target_flag);
    }

    return packed_temp_moist_diff;
}

uint swapMoistTemp(uint input_data) {
    uint temp = input_data >> 16;
    uint moist = input_data & 0xfff8;

    return (moist << 16) | (temp << 3) | (input_data & 0x07);
}

uint reswapMoistTemp(uint input_data) {
    uint temp = input_data & 0x7fff8;
    uint moist = input_data >> 19;

    return (temp << 13) | (moist << 3) | (input_data & 0x07);
}

void createTempMoistureFlowBuffer(int pixel_index, ivec3 block_coords) {
    int iz = pixel_index / (10 * 10);
    int ixy = pixel_index % (10 * 10);

    ivec3 dlc = ivec3(ixy % 10, ixy / 10, iz);
    ivec3 slc = dlc + 1;

    ivec3 pixel_coords = clamp(dlc + block_coords - 1,
                               ivec3(0),
                               params.size - 1);
    // temprature on the top of 16bits, moist on the lower 16bits.
    uint center = s_temp_moisture_grid[slc.z][slc.y][slc.x];

    uint left  = s_temp_moisture_grid[slc.z][slc.y][slc.x-1] | kNodeLeft;
    uint right = s_temp_moisture_grid[slc.z][slc.y][slc.x+1] | kNodeRight;
    uint back  = s_temp_moisture_grid[slc.z][slc.y-1][slc.x] | kNodeBack;
    uint front = s_temp_moisture_grid[slc.z][slc.y+1][slc.x] | kNodeFront;
    uint below = s_temp_moisture_grid[slc.z-1][slc.y][slc.x] | kNodeBelow;
    uint above = s_temp_moisture_grid[slc.z+1][slc.y][slc.x] | kNodeAbove;

    uint min_temp = min(min(min(left, right), min(back, front)), min(below, above));

    left = swapMoistTemp(left);
    right = swapMoistTemp(right);
    back = swapMoistTemp(back);
    front = swapMoistTemp(front);
    below = swapMoistTemp(below);
    above = swapMoistTemp(above);

    uint max_moist = max(max(max(left, right), max(back, front)), max(below, above));

    s_flow_grid[dlc.z][dlc.y][dlc.x] =
        packTempDiff(min_temp, reswapMoistTemp(max_moist), center, pixel_coords);
}

vec2 gatherTempMoistSamples(ivec3 dlc, out vec3 airflow_dir, float above_ratio, float below_ratio) {
    ivec3 slc = dlc + 1;
    uint center = s_flow_grid[slc.z][slc.y][slc.x];

    uint left  = s_flow_grid[slc.z][slc.y][slc.x-1];
    uint right = s_flow_grid[slc.z][slc.y][slc.x+1];
    uint back  = s_flow_grid[slc.z][slc.y-1][slc.x];
    uint front = s_flow_grid[slc.z][slc.y+1][slc.x];
    uint below = s_flow_grid[slc.z-1][slc.y][slc.x];
    uint above = s_flow_grid[slc.z+1][slc.y][slc.x];

    vec2 temp_moist_adj = vec2(0);
    vec3 airflow_vec = vec3(0);
    if ((left & 0x07) == kNodeRight) {
        vec2 tm = unpackSnorm2x16(left & 0xfffffff8);
        temp_moist_adj += tm;
        airflow_vec += vec3(tm.y, 0, 0);
    }
    if ((right & 0x07) == kNodeLeft) {
        vec2 tm = unpackSnorm2x16(right & 0xfffffff8);
        temp_moist_adj += tm;
        airflow_vec += vec3(-tm.y, 0, 0);
    }
    if ((back & 0x07) == kNodeFront) {
        vec2 tm = unpackSnorm2x16(back & 0xfffffff8);
        temp_moist_adj += tm;
        airflow_vec += vec3(0, 0, tm.y);
    }
    if ((front & 0x07) == kNodeBack) {
        vec2 tm = unpackSnorm2x16(front & 0xfffffff8);
        temp_moist_adj += tm;
        airflow_vec += vec3(0, 0, -tm.y);
    }
    if ((below & 0x07) == kNodeAbove) {
        vec2 tm = unpackSnorm2x16(below & 0xfffffff8) * below_ratio;
        temp_moist_adj += tm;
        airflow_vec += vec3(0, tm.y, 0);
    }
    if ((above & 0x07) == kNodeBelow) {
        vec2 tm = unpackSnorm2x16(above & 0xfffffff8) * above_ratio;
        temp_moist_adj += tm;
        airflow_vec += vec3(0, -tm.y, 0);
    }

    uint flow_tag = center & 0x07;
    vec2 tm = unpackSnorm2x16(center & 0xfffffff8);
    temp_moist_adj -= tm;

    airflow_vec += vec3(flow_tag == kNodeLeft  ? -tm.y : (flow_tag == kNodeRight ? tm.y : 0),
                        flow_tag == kNodeBelow ? -tm.y : (flow_tag == kNodeAbove ? tm.y : 0),
                        flow_tag == kNodeBack  ? -tm.y : (flow_tag == kNodeFront ? tm.y : 0));

    airflow_dir = airflow_vec * kMaxTempMoistDiff;
    return temp_moist_adj.yx * kMaxTempMoistDiff;
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 16) in;
void main()
{
    ivec3 pixel_coords = ivec3(gl_GlobalInvocationID.xyz);
    ivec3 local_coords = ivec3(gl_LocalInvocationID.xyz);
    ivec3 block_coords = ivec3(gl_WorkGroupID.xyz) * ivec3(8, 8, 16);
    int pixel_index = int(gl_LocalInvocationIndex);

    if (pixel_index < 12 * 12) {
        ivec2 slc = ivec2(pixel_index % 12, pixel_index / 12);
        ivec2 src_coords = clamp(slc + block_coords.xy - 2,
                                 ivec2(0),
                                 params.size.xy - 1);
        vec2 noise_values = hash23(vec3(src_coords, params.current_time));
        vec2 uv = (src_coords + noise_values) * params.inv_size.xy;
        s_ground_info[slc.y][slc.x] =
            getPackedLayers((uv - 0.5f) * 2.0f + 0.5f);
    }

    barrier();
    memoryBarrierShared();

    if (pixel_index < (20 * 12 * 12 / 3)) {
        for (int i = 0; i < 3; i++) {
            updateTempMoistureBuffer(pixel_index * 3 + i, block_coords);
        }
    }

    barrier();
    memoryBarrierShared();

    if (pixel_index < (18 * 10 * 10 / 2)) {
        for (int i = 0; i < 2; i++) {
            createTempMoistureFlowBuffer(pixel_index * 2 + i, block_coords);
        }
    }

    barrier();
    memoryBarrierShared();

    vec3 airflow_dir;
    float uvw_w = (pixel_coords.z + 0.5) * params.inv_size.z;
    float sample_delta_h = getSampleToDeltaHeight(uvw_w);
    float above_sample_delta_h = getSampleToDeltaHeight(uvw_w + params.inv_size.z);
    float below_sample_delta_h = getSampleToDeltaHeight(uvw_w - params.inv_size.z);
    vec2 temp_moist_adj = gatherTempMoistSamples(local_coords,
                                          airflow_dir,
                                          above_sample_delta_h / sample_delta_h,
                                          below_sample_delta_h / sample_delta_h);

    float sample_h = getSampleToHeight(uvw_w);
    float target_stable_temp = getReferenceDegree(params.controls.sea_level_temperature, sample_h);

    ivec3 slc = local_coords + 2;
    vec2 temp_moist = unpackTempMoist(s_temp_moisture_grid[slc.z][slc.y][slc.x]);

    vec4 noise_values = hash44(vec4(vec3(pixel_coords), params.current_time));
    vec3 uvw = ((pixel_coords + 0.5f) + getGlobalAirflowVector(noise_values.x)) * params.inv_size;

    vec2 src_temp_moist = texture(src_temp_moisture, uvw).xy;
    float src_temp = denormalizeTemperature(src_temp_moist.x);
    float src_moist = denormalizeMoisture(src_temp_moist.y);

    float cur_temp = target_stable_temp + temp_moist.x + temp_moist_adj.x;
    float cur_moist = temp_moist.y + temp_moist_adj.y;

    cur_temp = mix(cur_temp, src_temp, 0.0f);
    cur_moist = mix(cur_moist, src_moist, 0.5f);
    imageStore(dst_temp_moisture,
               pixel_coords,
               vec4(normalizeTemperature(cur_temp), normalizeMoisture(cur_moist), 0, 0));

    vec4 src_airflow = imageLoad(dst_airflow, pixel_coords);
    vec3 src_airflow_dir = src_airflow.xyz * 2.0f - 1.0f;
    airflow_dir = mix(airflow_dir, src_airflow_dir * getPackedVectorLength(src_airflow.w), params.controls.mix_rate);
    float new_airflow_str = getNormalizedVectorLength(airflow_dir);
    imageStore(dst_airflow, pixel_coords, vec4(normalize(airflow_dir) * 0.5f + 0.5f, new_airflow_str));
}